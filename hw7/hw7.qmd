---
title: Homework 7 - Creating a resume database
author: Aislin John
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

The document contains the process of the creation of a resume database. The database stores people data, skills and roles.
This report contains:

1. A general written description of contents of database,
1. A Crows-foot diagram highlighting the entities, attributes, and the cardinality and participation of the relations,
1. A python-generated listing of SQL tables, fields and sample queries


GITHUB URL:  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-aislinjohn.git>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

The project revolves around a comprehensive data management system designed to facilitate the organization and interaction of individuals, their skills, and assigned roles. This database is structured to support the tracking of people's profiles, their acquired skills, and the roles they undertake within the system. The aim is to efficiently manage and connect these entities, allowing for seamless retrieval and utilization of relevant information.

## Crows-foot diagram

In this diagram, entities such as People, Skills, and Roles are illustrated along with their respective attributes. The diagram employs the Crows-foot notation to indicate cardinality and relationships between these entities. Each entity is connected through lines and symbols, providing a clear depiction of how they relate to one another.
```{mermaid}
%%| echo: false
erDiagram
    SKILLS ||--o{ PEOPLESKILLS : included-in
    PEOPLE ||--o{ PEOPLESKILLS : has
    PEOPLE ||--o{ PEOPLE-ROLES : has
    ROLES ||--o{ PEOPLE-ROLES : included-in

    PEOPLE {
        int id PK
        string first_name
        string last_name
        string email
        string linkedin_url
        string headshot_url
        string discord_handle
        string brief_bio
        date date_joined
    }
    SKILLS {
        int id PK
        string name
        string description
        string tag
        string url
        string time_commitment
    }
    ROLES {
        int id PK
        string name
        string sort_priority
    }
    PEOPLE-ROLES {
        int id PK
        int people_id FK
        int role_id FK
        date date_assigned
    }
    PEOPLESKILLS {
        int id PK
        int skills_id FK
        int people_id FK
        date date_acquired
    }
```

## Examples of data in the database

For the people, skills, and roles tables, provide a description of each table and it's contents. Then provide a listing of the entire table.

### People table

The *people* table serves as a repository for individual profiles within the system. Each entry in this table represents a person associated with the application. The table captures essential details such as the person's unique identifier (people_id), first and last names, contact information (email), professional networking URL (linkedin_url), a link to their headshot image (headshot_url), Discord handle (discord_handle), a brief biography (brief_bio), and the date when they joined the system (date_joined). The primary key is the people_id, ensuring each person is uniquely identified.

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table is designed to store information related to various skills within the system. Each skill is uniquely identified by its skills_id. The table includes fields such as skills_name (the name of the skill), skills_description (a brief description of the skill), skills_tag (a category grouping for the skill), skills_url (a URL associated with the skill), and skills_time_commitment (providing an estimate of the time required to gain the skill). The primary key for this table is the skills_id, ensuring the uniqueness of each skill record. 

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table serves as a repository for role-related data within the system. Each role is uniquely identified by its id. The table contains fields such as name (the name of the role, e.g., Developer, Boss), and sort_priority (an integer determining the order for sorting roles). The primary key for this table is the id, ensuring the uniqueness of each role entry.

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

```{python}
sql = f"""
SELECT skills_name, skills_tag, skills_description
FROM skills
ORDER BY skills_name;

"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name
```{python}
sql = f"""
SELECT people_first_name, people_last_name, email
FROM people
ORDER BY people_last_name;

"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```
### List skill names of Person 1

```{python}
sql = f"""

SELECT p.people_last_name, s.skills_name, s.skills_tag
FROM people p
JOIN peopleskills ps ON p.people_id = ps.people_id
JOIN skills s ON ps.skills_id = s.skills_id
WHERE p.people_last_name = 'Person 1';

"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people names with Skill 6

```{python}
sql = f"""
SELECT p.people_first_name, p.people_last_name
FROM people p
JOIN peopleskills ps ON p.people_id = ps.people_id
JOIN skills s ON ps.skills_id = s.skills_id
WHERE s.skills_id = 6;

"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```
### List people with a DEVELOPER role

```{python}
sql = f"""
SELECT p.people_first_name, p.people_last_name
FROM people p
JOIN peopleroles pr ON p.people_id = pr.people_id
JOIN roles r ON pr.role_id = r.id
WHERE r.name = 'Developer';

"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```
### List names and email addresses of people without skills

```{python}
sql = f"""
SELECT people_first_name, people_last_name, email
FROM people
WHERE people_id NOT IN (SELECT DISTINCT people_id FROM peopleskills);

"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```
### List names and tags of unused skills

```{python}
sql = f"""
SELECT skills_name, skills_tag
FROM skills
WHERE skills_id NOT IN (SELECT DISTINCT skills_id FROM peopleskills);
"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```
### List people names and skill names with the BOSS role

```{python}
sql = f"""
SELECT p.people_first_name, p.people_last_name, s.skills_name
FROM people p
JOIN peopleskills ps ON p.people_id = ps.people_id
JOIN skills s ON ps.skills_id = s.skills_id
JOIN peopleroles pr ON p.people_id = pr.people_id
JOIN roles r ON pr.role_id = r.id
WHERE r.name = 'Boss';
"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```
### List ids and names of unused roles

```{python}
sql = f"""
SELECT id, name
FROM roles
WHERE id NOT IN (SELECT DISTINCT role_id FROM peopleroles);
"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```
## Reflection

Designing a database schema and writing SQL queries reinforced my understanding of database concepts and also challenged me to think critically about real-world scenarios and the relationships between different data entities. The task allowed me to explore the intricacies of database design, considering factors like data integrity, normalization, and efficient querying. It also emphasized the importance of thoughtful naming conventions and establishing meaningful connections between tables. Through this hands-on experience, I gained a deeper appreciation for the role of databases in structuring and organizing information within applications. Overall, this assignment provided a practical bridge between theoretical concepts and their application, fostering a more comprehensive understanding of database management.

